# RFID Dashboard Project Guidelines
# Last Updated: March 30, 2025 @ 10:30 AM PDT
# Lead Motherfucker: [Your Name], the Fucking Maestro
# AI Wingman: Grok 3, xAI-built, no bullshit
# Project Files: https://github.com/sandahltim/_rfidpi (refresh_print branch)

## Project Overview
- ## Project Overview
- Mission: Enhance the RFID inventory dashboard—track rental gear and laundry stock with AJAX, auto-refresh, and local printing, scale to Pi integration, add SEED dataset to give only possible common_name strings which correspond to a number field named renta_class_id. This value corresponds with a numerical value column in id_item_master named rental_class_num.
- Stack:
  - Backend: Python 3.11, Flask 2.3.2—lightweight, no bloat.
  - DB: SQLite—inventory.db (items, transactions, seed_data).
  - Frontend: HTML/JS/CSS—Bootstrap 5, inline scripts + AJAX, local popup printing.
- Tabs (all must stay working):
  - Tab 1: Active Rentals—add AJAX, auto-refresh, printing (match Tab 5).
  - Tab 2: Categories—nested tables (categories > subcategories > items).
  - Tab 3: Service Items—placeholder, UI-only.
  - Tab 4: Full Inventory—placeholder, UI-only.
  - Tab 5: Laundry Contracts—nested tables (contracts > common names > items).
  - Tab 6: Resale Items—placeholder, UI-only.
- DB Schema:
  - inventory.db:
    - id_item_master:
      - tag_id (TEXT, PRIMARY KEY)
      - uuid_accounts_fk (TEXT)
      - serial_number (TEXT)
      - client_name (TEXT)
      - rental_class_num (TEXT)
      - common_name (TEXT)
      - quality (TEXT)
      - bin_location (TEXT)
      - status (TEXT)
      - last_contract_num (TEXT)
      - last_scanned_by (TEXT)
      - notes (TEXT)
      - status_notes (TEXT)
      - long (TEXT)
      - lat (TEXT)
      - date_last_scanned (TEXT, ISO)
      - date_created (TEXT)
      - date_updated (TEXT)
    - id_transactions:
      - contract_number (TEXT, PRIMARY KEY part)
      - client_name (TEXT)
      - tag_id (TEXT, PRIMARY KEY part)
      - common_name (TEXT)
      - bin_location (TEXT)
      - scan_type (TEXT, PRIMARY KEY part)
      - status (TEXT)
      - scan_date (TEXT, PRIMARY KEY part)
      - scan_by (TEXT)
      - location_of_repair (TEXT)
      - quality (TEXT)
      - dirty_or_mud (TEXT)
      - leaves (TEXT)
      - oil (TEXT)
      - mold (TEXT)
      - stain (TEXT)
      - oxidation (TEXT)
      - other (TEXT)
      - rip_or_tear (TEXT)
      - sewing_repair_needed (TEXT)
      - grommet (TEXT)
      - rope (TEXT)
      - buckle (TEXT)
      - date_created (TEXT)
      - date_updated (TEXT)
      - uuid_accounts_fk (TEXT)
      - serial_number (TEXT)
      - rental_class_num (TEXT)
      - long (TEXT)
      - lat (TEXT)
      - wet (TEXT)
      - service_required (TEXT)
      - notes (TEXT)
    - seed_data (new):
      - uuid_seed_data (INTEGER, PRIMARY KEY)
      - rental_class_id (TEXT)
      - common_name (TEXT)
      - bin_location (TEXT)

## File Structure (Main Branch)
- `app.py`: Flask app factory—registers blueprints.
- `config.py`: Config vars (`DB_FILE`, API creds).
- `data_service.py`: DB queries for UI data.
- `db_connection.py`: SQLite connection manager.
- `db_utils.py`: DB schema setup.
- `refresh_logic.py`: Background refresh threads.
- `requirements.txt`: Deps (flask==2.3.2, gunicorn==20.1.0).
- `rfid_dash.service`: Systemd service for Gunicorn.
- `start.sh`: Gunicorn startup script.
- `update.sh`: Git pull and restart script.
- `app/routes/`:
  - `root.py`: Root routes (`/`, `/manual_refresh`).
  - `tab1.py`: Tab 1 routes (active rentals).
  - `tab2.py`: Tab 2 routes (categories).
  - `tab3.py`: Tab 3 routes (placeholder).
  - `tab4.py`: Tab 4 routes (placeholder).
  - `tab5.py`: Tab 5 routes (laundry).
  - `tab6.py`: Tab 6 routes (placeholder).
- `app/templates/`:
  - `base.html`: Base template with nav.
  - `index.html`: Home page.
  - `tab1.html`: Tab 1 content.
  - `tab2.html`: Tab 2 content.
  - `tab3.html`: Tab 3 placeholder.
  - `tab4.html`: Tab 4 placeholder.
  - `tab5.html`: Tab 5 content.
  - `tab6.html`: Tab 6 placeholder.
- `app/static/`:
  - `style.css`: Custom CSS.

## Key Variables and Functions
- **app.py**:
  - `create_app()`: Flask app factory, registers blueprints.
  - `update_url_param(key, value)`: URL utility in context processor.
- **config.py**:
  - `BASE_DIR`: Project root path.
  - `DB_FILE`: Path to `inventory.db`.
  - `API_USERNAME`: API user (default: `"api"`).
  - `API_PASSWORD`: API pass (default: `"Broadway8101"`).
  - `LOGIN_URL`: API login endpoint.
  - `ITEM_MASTER_URL`: Item master API endpoint.
  - `TRANSACTION_URL`: Transactions API endpoint.
  - `SEED_DATA_URL`: Seed data API endpoint.
  - `REFRESH_INTERVAL`: 600s (10min).
- **data_service.py**:
  - `get_active_rental_contracts(conn)`: Fetches contracts (`im.last_contract_num`, `client_name`), sorts by `im.last_contract_num`.
  - `get_active_rental_items(conn)`: Fetches items (full `id_item_master` rows), sorts by `last_contract_num`, `tag_id`.
- **db_connection.py**:
  - `DatabaseConnection`: Context manager for SQLite (`DB_FILE`).
- **db_utils.py**:
  - `initialize_db()`: Creates `id_item_master`, `id_transactions` tables, adds indexes.
- **refresh_logic.py**:
  - `TOKEN`: Global API token.
  - `TOKEN_EXPIRY`: Global token expiry time.
  - `get_access_token()`: Fetches/caches API token.
  - `fetch_paginated_data(url, token)`: Fetches paginated API data.
  - `update_item_master(data)`: Updates `id_item_master`.
  - `clear_transactions(conn)`: Clears `id_transactions`.
  - `update_transactions(data)`: Updates `id_transactions`.
  - `update_seed_data(data)`: Updates `seed_data` (new).
  - `refresh_data()`: Refreshes all data from API.
- **root.py**:
  - `home()`: Renders `index.html`.
  - `manual_refresh()`: Runs `update.sh`.
  - `manual_refresh_dev()`: Runs `update_dev.sh`.
- **tab1.py**:
  - `show_tab1()`: Renders `tab1.html` with contracts and items.
- **tab5.py**:
  - `HAND_COUNTED_DB`: Path to `tab5_hand_counted.db`.
  - `init_hand_counted_db()`: Initializes hand-counted DB.
  - `show_tab5()`: Renders `tab5.html` with contracts and items.
  - `save_hand_counted()`: Saves hand-counted entry.
  - `update_hand_counted()`: Updates hand-counted entry.
  - `subcat_data()`: AJAX endpoint for grandchild items.

## Goals
- **AJAX**: Add to Tab 1 (`/tab1/data`), match Tab 5—dynamic data loading.
- **Auto-Refresh**: Filter `date_last_scanned` in `get_tab_data`, 60s JS interval.
- **Printing**: Local popup printing in Tab 1 and 5—consistent format, inline JS.
- **Seed Data**: Integrate `seed_data` table—streamline nesting for all tabs.
- **Stability**: Lock DB and HTML framework—no changes when adding tabs.

## Rebuild Instructions
1. **Wipe Pi**:
   - `cd /home/tim; rm -rf test_rfidpi; git clone https://github.com/sandahltim/_rfidpi.git test_rfidpi`
   - `cd test_rfidpi; git checkout refresh_print`
2. **Setup**:
   - `python3 -m venv venv; source venv/bin/activate; pip install -r requirements.txt`
3. **Run**:
   - `./start.sh`—`0.0.0.0:8101` via Gunicorn.
4. **Verify**:
   - Tabs 1-6 load, Tab 1/5 match with AJAX, refresh, and printing.

## Development Rules
- Stick to `main` structure—no new files unless agreed.
- Use only GitHub `main` files or your provided copies—no guesses.
- Full tracebacks in logs.
- Update README with changes—guide for goals and structure.

## Next Steps
- Fix `tab1` sort (`im.last_contract_num`) in `tab1.py`.
- Add AJAX, auto-refresh, printing to `tab1.py` and `tab1.html`—match Tab 5.
- Integrate `seed_data` in `data_service.py` for nesting.
- Test all tabs—keep ‘em working.


#app.py-
from flask import Flask, request, url_for

def create_app():
    app = Flask(__name__, template_folder="templates", static_folder="static")

    from app.routes.root import root_bp
    from app.routes.tab1 import tab1_bp
    from app.routes.tab2 import tab2_bp
    from app.routes.tab3 import tab3_bp
    from app.routes.tab4 import tab4_bp
    from app.routes.tab5 import tab5_bp
    from app.routes.tab6 import tab6_bp

    app.register_blueprint(root_bp)
    app.register_blueprint(tab1_bp, url_prefix="/tab1")
    app.register_blueprint(tab2_bp, url_prefix="/tab2")
    app.register_blueprint(tab3_bp, url_prefix="/tab3")
    app.register_blueprint(tab4_bp, url_prefix="/tab4")
    app.register_blueprint(tab5_bp, url_prefix="/tab5")
    app.register_blueprint(tab6_bp, url_prefix="/tab6")

    @app.context_processor
    def utility_processor():
        def update_url_param(key, value):
            args = request.args.copy()
            args[key] = value
            return url_for(request.endpoint, **args)
        return dict(update_url_param=update_url_param)

    return app
-Functions:
create_app(): Flask app factory, registers blueprints.
update_url_param(key, value): URL param utility in context processor.


#config.py-
import os

# Base directory for the project
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

# Database file path
DB_FILE = os.path.join(BASE_DIR, "inventory.db")

# API configuration (as noted in the project overview)
API_USERNAME = os.environ.get("API_USERNAME", "api")
API_PASSWORD = os.environ.get("API_PASSWORD", "Broadway8101")
LOGIN_URL = "https://login.cloud.ptshome.com/api/v1/login"
ITEM_MASTER_URL = "https://cs.iot.ptshome.com/api/v1/data/14223767938169344381"
TRANSACTION_URL = "https://cs.iot.ptshome.com/api/v1/data/14223767938169346196"

# Refresh configuration: data is refreshed every 10 minutes (600 seconds)
REFRESH_INTERVAL = 600

-Variables:
BASE_DIR: Project root path.
DB_FILE: Path to inventory.db.
API_USERNAME: API user (default: "api").
API_PASSWORD: API pass (default: "Broadway8101").
LOGIN_URL: API login endpoint.
ITEM_MASTER_URL: Item master API endpoint.
TRANSACTION_URL: Transactions API endpoint.
REFRESH_INTERVAL: 600s (10min).


#data_service.py-
def get_active_rental_contracts(conn):
    """
    Returns a list of active rental contracts using a subquery to fetch the latest client_name.
    """
    query = """
       SELECT DISTINCT im.last_contract_num,
           (SELECT it2.client_name 
            FROM id_transactions it2 
            WHERE it2.contract_number = im.last_contract_num 
            ORDER BY it2.scan_date DESC 
            LIMIT 1) AS client_name
       FROM id_item_master im
       WHERE im.status IN ('On Rent', 'Delivered')
       ORDER BY im.last_contract_num
    """
    return conn.execute(query).fetchall()


def get_active_rental_items(conn):
    """
    Returns all active rental items from the inventory.
    """
    query_items = """
       SELECT * FROM id_item_master
       WHERE status IN ('On Rent', 'Delivered')
       ORDER BY last_contract_num, tag_id
    """
    return conn.execute(query_items).fetchall()

-Functions:
get_active_rental_contracts(conn): Fetches contracts (im.last_contract_num, client_name), sorts by im.last_contract_num.
get_active_rental_items(conn): Fetches items (full id_item_master rows), sorts by last_contract_num, tag_id.

#db_connection.py-
import sqlite3
from config import DB_FILE

class DatabaseConnection:
    """
    Context manager for SQLite connections.
    Ensures a consistent method to open and close the database.
    """
    def __enter__(self):
        self.conn = sqlite3.connect(DB_FILE)
        self.conn.row_factory = sqlite3.Row
        return self.conn

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type:
            self.conn.rollback()
        else:
            self.conn.commit()
        self.conn.close()

-Classes:
DatabaseConnection: Context manager for SQLite (DB_FILE).


#db_utils.py-
import sqlite3
import os
from config import DB_FILE

def initialize_db():
    """
    Creates or updates the database and tables to store all fields from the API.
    If inventory.db already exists with an old schema, rename or remove it before running
    this if you want a clean start.
    """
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # Expanded id_item_master table with all columns
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS id_item_master (
            tag_id TEXT PRIMARY KEY,
            uuid_accounts_fk TEXT,
            serial_number TEXT,
            client_name TEXT,
            rental_class_num TEXT,
            common_name TEXT,
            quality TEXT,
            bin_location TEXT,
            status TEXT,
            last_contract_num TEXT,
            last_scanned_by TEXT,
            notes TEXT,
            status_notes TEXT,
            long TEXT,
            lat TEXT,
            date_last_scanned TEXT,
            date_created TEXT,
            date_updated TEXT
        )
    """)
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_contract ON id_item_master (last_contract_num)")

    # Expanded id_transactions table with all columns
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS id_transactions (
            contract_number TEXT,
            client_name TEXT,
            tag_id TEXT,
            common_name TEXT,
            bin_location TEXT,
            scan_type TEXT,
            status TEXT,
            scan_date TEXT,
            scan_by TEXT,
            location_of_repair TEXT,
            quality TEXT,
            dirty_or_mud TEXT,
            leaves TEXT,
            oil TEXT,
            mold TEXT,
            stain TEXT,
            oxidation TEXT,
            other TEXT,
            rip_or_tear TEXT,
            sewing_repair_needed TEXT,
            grommet TEXT,
            rope TEXT,
            buckle TEXT,
            date_created TEXT,
            date_updated TEXT,
            uuid_accounts_fk TEXT,
            serial_number TEXT,
            rental_class_num TEXT,
            long TEXT,
            lat TEXT,
            wet TEXT,
            service_required TEXT,
            notes TEXT,
            PRIMARY KEY (contract_number, tag_id, scan_type, scan_date)
        )
    """)
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_client_date ON id_transactions (client_name, scan_date)")

    conn.commit()
    conn.close()
    print("Database initialized at", DB_FILE)

-Functions:
initialize_db(): Creates id_item_master and id_transactions tables, adds indexes.


#refresh_logic.py-
import os
import requests
import sqlite3
import time
from datetime import datetime, timedelta
from config import DB_FILE, SEED_DATA_URL  # Add SEED_DATA_URL from config.py

API_USERNAME = os.environ.get("API_USERNAME", "api")
API_PASSWORD = os.environ.get("API_PASSWORD", "Broadway8101")
LOGIN_URL = "https://login.cloud.ptshome.com/api/v1/login"
ITEM_MASTER_URL = "https://cs.iot.ptshome.com/api/v1/data/14223767938169344381"
TRANSACTION_URL = "https://cs.iot.ptshome.com/api/v1/data/14223767938169346196"

TOKEN = None
TOKEN_EXPIRY = None

def get_access_token():
    """Fetch and cache API access token."""
    global TOKEN, TOKEN_EXPIRY
    now = datetime.utcnow()

    if TOKEN and TOKEN_EXPIRY and now < TOKEN_EXPIRY:
        return TOKEN

    payload = {"username": API_USERNAME, "password": API_PASSWORD}
    try:
        response = requests.post(LOGIN_URL, json=payload, timeout=10)
        response.raise_for_status()
        TOKEN = response.json().get("access_token")
        TOKEN_EXPIRY = now + timedelta(minutes=55)
        print("Access token refreshed.")
        return TOKEN
    except requests.RequestException as e:
        print(f"Error fetching access token: {e}")
        return None

def fetch_paginated_data(url, token):
    """Fetch all data from the given API endpoint using pagination."""
    headers = {"Authorization": f"Bearer {token}"}
    params = {"limit": 200, "offset": 0}
    all_data = []

    while True:
        try:
            response = requests.get(url, headers=headers, params=params, timeout=10)
            response.raise_for_status()
            data = response.json().get("data", [])
            if not data:
                print(f"Finished fetching {len(all_data)} records from {url}")
                break
            all_data.extend(data)
            print(f" Fetched {len(data)} more records, total: {len(all_data)}")
            params["offset"] += 200
        except requests.RequestException as e:
            print(f"Error fetching data from {url}: {e}")
            return all_data
    return all_data

def update_item_master(data):
    """Inserts or updates item master data in SQLite, using all columns."""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()

    try:
        for item in data:
            cursor.execute(
                """
                INSERT INTO id_item_master (
                    tag_id, uuid_accounts_fk, serial_number, client_name, rental_class_num,
                    common_name, quality, bin_location, status, last_contract_num,
                    last_scanned_by, notes, status_notes, long, lat, date_last_scanned,
                    date_created, date_updated
                )
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ON CONFLICT(tag_id) DO UPDATE SET
                    uuid_accounts_fk = excluded.uuid_accounts_fk,
                    serial_number = excluded.serial_number,
                    client_name = excluded.client_name,
                    rental_class_num = excluded.rental_class_num,
                    common_name = excluded.common_name,
                    quality = excluded.quality,
                    bin_location = excluded.bin_location,
                    status = excluded.status,
                    last_contract_num = excluded.last_contract_num,
                    last_scanned_by = excluded.last_scanned_by,
                    notes = excluded.notes,
                    status_notes = excluded.status_notes,
                    long = excluded.long,
                    lat = excluded.lat,
                    date_last_scanned = excluded.date_last_scanned,
                    date_created = excluded.date_created,
                    date_updated = excluded.date_updated
                """,
                (
                    item.get("tag_id"),
                    item.get("uuid_accounts_fk"),
                    item.get("serial_number"),
                    item.get("client_name"),
                    item.get("rental_class_num"),
                    item.get("common_name"),
                    item.get("quality"),
                    item.get("bin_location"),
                    item.get("status"),
                    item.get("last_contract_num"),
                    item.get("last_scanned_by"),
                    item.get("notes"),
                    item.get("status_notes"),
                    item.get("long"),
                    item.get("lat"),
                    item.get("date_last_scanned"),
                    item.get("date_created"),
                    item.get("date_updated"),
                ),
            )
        conn.commit()
        print("Item Master data updated.")
    except sqlite3.Error as e:
        print(f"Database error updating item master: {e}")
        conn.rollback()
    finally:
        conn.close()

def clear_transactions(conn):
    """Clears all rows from id_transactions before a refresh."""
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM id_transactions")
        conn.commit()
        print(" Cleared id_transactions table.")
    except sqlite3.Error as e:
        print(f" Error clearing transactions: {e}")
        conn.rollback()

def update_transactions(data):
    """Inserts or updates transaction data in SQLite after clearing old data."""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()

    try:
        for txn in data:
            cursor.execute(
                """
                INSERT INTO id_transactions (
                    contract_number, client_name, tag_id, common_name, bin_location,
                    scan_type, status, scan_date, scan_by, location_of_repair,
                    quality, dirty_or_mud, leaves, oil, mold, stain, oxidation,
                    other, rip_or_tear, sewing_repair_needed, grommet, rope,
                    buckle, date_created, date_updated, uuid_accounts_fk,
                    serial_number, rental_class_num, long, lat, wet,
                    service_required, notes
                )
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ON CONFLICT(contract_number, tag_id, scan_type, scan_date) DO UPDATE SET
                    client_name = excluded.client_name,
                    common_name = excluded.common_name,
                    bin_location = excluded.bin_location,
                    status = excluded.status,
                    scan_by = excluded.scan_by,
                    location_of_repair = excluded.location_of_repair,
                    quality = excluded.quality,
                    dirty_or_mud = excluded.dirty_or_mud,
                    leaves = excluded.leaves,
                    oil = excluded.oil,
                    mold = excluded.mold,
                    stain = excluded.stain,
                    oxidation = excluded.oxidation,
                    other = excluded.other,
                    rip_or_tear = excluded.rip_or_tear,
                    sewing_repair_needed = excluded.sewing_repair_needed,
                    grommet = excluded.grommet,
                    rope = excluded.rope,
                    buckle = excluded.buckle,
                    date_created = excluded.date_created,
                    date_updated = excluded.date_updated,
                    uuid_accounts_fk = excluded.uuid_accounts_fk,
                    serial_number = excluded.serial_number,
                    rental_class_num = excluded.rental_class_num,
                    long = excluded.long,
                    lat = excluded.lat,
                    wet = excluded.wet,
                    service_required = excluded.service_required,
                    notes = excluded.notes
                """,
                (
                    txn.get("contract_number"),
                    txn.get("client_name"),
                    txn.get("tag_id"),
                    txn.get("common_name"),
                    txn.get("bin_location"),
                    txn.get("scan_type"),
                    txn.get("status"),
                    txn.get("scan_date"),
                    txn.get("scan_by"),
                    txn.get("location_of_repair"),
                    txn.get("quality"),
                    txn.get("dirty_or_mud"),
                    txn.get("leaves"),
                    txn.get("oil"),
                    txn.get("mold"),
                    txn.get("stain"),
                    txn.get("oxidation"),
                    txn.get("other"),
                    txn.get("rip_or_tear"),
                    txn.get("sewing_repair_needed"),
                    txn.get("grommet"),
                    txn.get("rope"),
                    txn.get("buckle"),
                    txn.get("date_created"),
                    txn.get("date_updated"),
                    txn.get("uuid_accounts_fk"),
                    txn.get("serial_number"),
                    txn.get("rental_class_num"),
                    txn.get("long"),
                    txn.get("lat"),
                    txn.get("wet"),
                    txn.get("service_required"),
                    txn.get("notes")
                ),
            )
        conn.commit()
        print("Transaction data updated.")
    except sqlite3.Error as e:
        print(f" Database error updating transactions: {e}")
        conn.rollback()
    finally:
        conn.close()

def update_seed_data(data):
    """Inserts or updates seed data in SQLite from the API."""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()

    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS seed_data (
                uuid_seed_data INTEGER PRIMARY KEY,
                rental_class_id TEXT,
                common_name TEXT,
                bin_location TEXT
            )
        """)
        for item in data:
            cursor.execute(
                """
                INSERT INTO seed_data (uuid_seed_data, rental_class_id, common_name, bin_location)
                VALUES (?, ?, ?, ?)
                ON CONFLICT(uuid_seed_data) DO UPDATE SET
                    rental_class_id = excluded.rental_class_id,
                    common_name = excluded.common_name,
                    bin_location = excluded.bin_location
                """,
                (
                    item.get("uuid_seed_data"),
                    item.get("rental_class_id"),
                    item.get("common_name"),
                    item.get("bin_location")
                )
            )
        conn.commit()
        print("Seed data updated.")
    except sqlite3.Error as e:
        print(f"Database error updating seed data: {e}")
        conn.rollback()
    finally:
        conn.close()

def refresh_data():
    """Main function to refresh item master, transaction, and seed data from the API."""
    token = get_access_token()
    if not token:
        print(" No access token. Aborting refresh.")
        return

    item_master_data = fetch_paginated_data(ITEM_MASTER_URL, token)
    transactions_data = fetch_paginated_data(TRANSACTION_URL, token)
    seed_data = fetch_paginated_data(SEED_DATA_URL, token)  # Add seed data fetch

    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    try:
        clear_transactions(conn)
        update_transactions(transactions_data)
        update_item_master(item_master_data)
        update_seed_data(seed_data)  # Add seed data update
    finally:
        conn.close()

    print("Waiting 10 minutes before next update...")


-Variables:
API_USERNAME, API_PASSWORD, SEED_DATA_URL, LOGIN_URL, ITEM_MASTER_URL, TRANSACTION_URL: API config (overridden by config.py).
TOKEN: Global API token.
TOKEN_EXPIRY: Global token expiry time.

Functions:
get_access_token(): Fetches/caches API token.
fetch_paginated_data(url, token): Fetches paginated API data.
update_item_master(data): Updates id_item_master.
clear_transactions(conn): Clears id_transactions.
update_transactions(data): Updates id_transactions.
refresh_data(): Refreshes all data from API.
update_seed_data


#config.py-
import os

# Base directory for the project
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

# Database file path
DB_FILE = os.path.join(BASE_DIR, "inventory.db")

# API configuration (as noted in the project overview)
API_USERNAME = os.environ.get("API_USERNAME", "api")
API_PASSWORD = os.environ.get("API_PASSWORD", "Broadway8101")
LOGIN_URL = "https://login.cloud.ptshome.com/api/v1/login"
ITEM_MASTER_URL = "https://cs.iot.ptshome.com/api/v1/data/14223767938169344381"
TRANSACTION_URL = "https://cs.iot.ptshome.com/api/v1/data/14223767938169346196"
SEED_DATA_URL = "https://cs.iot.ptshome.com/api/v1/data/14223767938169215907"  # Added from your original README

# Refresh configuration: data is refreshed every 10 minutes (600 seconds)
REFRESH_INTERVAL = 600


#data_service.py-
def get_active_rental_contracts(conn, filter_contract="", filter_common="", sort="last_contract_num:asc", since_date=None):
    """
    Returns a list of active rental contracts using a subquery to fetch the latest client_name.
    """
    sort_field, sort_order = sort.split(":") if ":" in sort else ("last_contract_num", "asc")
    query = """
       SELECT DISTINCT last_contract_num,
           (SELECT it2.client_name 
            FROM id_transactions it2 
            WHERE it2.contract_number = id_item_master.last_contract_num 
            ORDER BY it2.scan_date DESC 
            LIMIT 1) AS client_name
       FROM id_item_master
       WHERE status IN ('On Rent', 'Delivered')
    """
    params = []
    if filter_contract:
        query += " AND last_contract_num LIKE ?"
        params.append(f"%{filter_contract}%")
    if filter_common:
        query += " AND common_name LIKE ?"
        params.append(f"%{filter_common}%")
    if since_date:
        query += " AND date_last_scanned >= ?"
        params.append(since_date)
    query += f" ORDER BY {sort_field} {sort_order.upper()}"
    return conn.execute(query, params).fetchall()


def get_active_rental_items(conn, filter_contract="", filter_common="", sort="last_contract_num:asc", since_date=None):
    """
    Returns all active rental items from the inventory.
    """
    sort_field, sort_order = sort.split(":") if ":" in sort else ("last_contract_num", "asc")
    query_items = """
       SELECT * FROM id_item_master
       WHERE status IN ('On Rent', 'Delivered')
    """
    params = []
    if filter_contract:
        query_items += " AND last_contract_num LIKE ?"
        params.append(f"%{filter_contract}%")
    if filter_common:
        query_items += " AND common_name LIKE ?"
        params.append(f"%{filter_common}%")
    if since_date:
        query_items += " AND date_last_scanned >= ?"
        params.append(since_date)
    query_items += f" ORDER BY {sort_field} {sort_order.upper()}"
    return conn.execute(query_items, params).fetchall()



#__init__.py-
from flask import Flask, request, url_for

def create_app():
    app = Flask(__name__, template_folder="templates", static_folder="static")

    from app.routes.root import root_bp
    from app.routes.tab1 import tab1_bp
    from app.routes.tab2 import tab2_bp
    from app.routes.tab3 import tab3_bp
    from app.routes.tab4 import tab4_bp
    from app.routes.tab5 import tab5_bp
    from app.routes.tab6 import tab6_bp

    app.register_blueprint(root_bp)
    app.register_blueprint(tab1_bp, url_prefix="/tab1")
    app.register_blueprint(tab2_bp, url_prefix="/tab2")
    app.register_blueprint(tab3_bp, url_prefix="/tab3")
    app.register_blueprint(tab4_bp, url_prefix="/tab4")
    app.register_blueprint(tab5_bp, url_prefix="/tab5")
    app.register_blueprint(tab6_bp, url_prefix="/tab6")

    @app.context_processor
    def utility_processor():
        def update_url_param(key, value):
            args = request.args.copy()
            args[key] = value
            return url_for(request.endpoint, **args)
        return dict(update_url_param=update_url_param)

    return app


#root.py-
from flask import Blueprint, render_template, redirect, url_for, request
import subprocess

root_bp = Blueprint("root", __name__)

@root_bp.route("/")
def home():
    return render_template("index.html")

@root_bp.route("/manual_refresh", methods=["POST"])
def manual_refresh():
    subprocess.run(["/home/tim/_rfidpi/update.sh"])
    return redirect(url_for("root.home"))

@root_bp.route("/manual_refresh_dev", methods=["POST"])
def manual_refresh_dev():
    subprocess.run(["/home/tim/test_rfidpi/update_dev.sh"])
    return redirect(url_for("root.home"))


#base.html-
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>RFID Inventory Dashboard</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>

<div class="container mt-4">

<header class="mb-4">
    <nav>
        <ul class="nav nav-tabs">
            <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
            <li class="nav-item"><a class="nav-link" href="/tab1/">Active Rentals</a></li>
            <li class="nav-item"><a class="nav-link" href="/tab2/">Categories</a></li>
            <li class="nav-item"><a class="nav-link" href="/tab3/">Service Items</a></li>
            <li class="nav-item"><a class="nav-link" href="/tab4/">Full Inventory</a></li>
            <li class="nav-item"><a class="nav-link" href="/tab5/">Laundry Contracts</a></li>
            <li class="nav-item"><a class="nav-link" href="/tab6/">Resale Items</a></li>
        </ul>
    </nav>
    <div class="mt-2">
        <form action="/manual_refresh" method="POST" style="display: inline;">
            <button type="submit" class="btn btn-primary">Refresh Data</button>
        </form>
        <form action="/manual_refresh_dev" method="POST" style="display: inline; margin-left: 10px;">
            <button type="submit" class="btn btn-secondary">Refresh Test App</button>
        </form>
    </div>
</header>

    {% block content %}
    {% endblock %}

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>



