class CasinoAudioEngine{constructor(){this.initialized=false;this.context=null;this.masterGain=null;this.compressor=null;this.analyser=null;this.convolver=null;this.listener=null;this.channels={master:{gain:null,volume:1.0},effects:{gain:null,volume:0.8},ambient:{gain:null,volume:0.4},ui:{gain:null,volume:0.7},music:{gain:null,volume:0.3},voice:{gain:null,volume:1.0}};this.spatialSources=new Map();this.bufferCache=new Map();this.loadingPromises=new Map();this.preferences={masterVolume:1.0,effectsVolume:0.8,ambientVolume:0.4,uiVolume:0.7,musicVolume:0.3,voiceVolume:1.0,spatialAudio:true,reverb:true,compression:true,adaptiveQuality:true,muted:false,reducedMotion:false};this.performance={bufferLoadTime:0,averageLatency:0,droppedFrames:0,cpuUsage:0};this.soundLibrary={buttonHover:'/static/audio/ui-hover.mp3',buttonClick:'/static/audio/button-click.mp3',buttonDisabled:'/static/audio/ui-disabled.mp3',modalOpen:'/static/audio/modal-open.mp3',modalClose:'/static/audio/modal-close.mp3',tabSwitch:'/static/audio/tab-switch.mp3',slotLeverPull:'/static/audio/slot-lever-pull.mp3',slotReelStart:'/static/audio/slot-reel-start.mp3',slotReelSpin:'/static/audio/reel-spin.mp3',slotReelStop1:'/static/audio/slot-reel-stop-1.mp3',slotReelStop2:'/static/audio/slot-reel-stop-2.mp3',slotReelStop3:'/static/audio/slot-reel-stop-3.mp3',slotNearMiss:'/static/audio/slot-near-miss.mp3',scratchStart:'/static/audio/scratch-start.mp3',scratchLoop:'/static/audio/scratch-loop.mp3',scratchReveal:'/static/audio/scratch-reveal.mp3',scratchComplete:'/static/audio/scratch-complete.mp3',rouletteSpin:'/static/audio/roulette-spin.mp3',rouletteBallRoll:'/static/audio/roulette-ball-roll.mp3',rouletteBallBounce:'/static/audio/roulette-ball-bounce.mp3',rouletteBallDrop:'/static/audio/roulette-ball-drop.mp3',rouletteClick:'/static/audio/roulette-click.mp3',wheelStart:'/static/audio/wheel-start.mp3',wheelSpin:'/static/audio/wheel-spin.mp3',wheelTick:'/static/audio/wheel-tick.mp3',wheelSlowdown:'/static/audio/wheel-slowdown.mp3',wheelStop:'/static/audio/wheel-stop.mp3',diceShake:'/static/audio/dice-shake.mp3',diceThrow:'/static/audio/dice-throw.mp3',diceRoll1:'/static/audio/dice-roll-1.mp3',diceRoll2:'/static/audio/dice-roll-2.mp3',diceLand:'/static/audio/dice-land.mp3',diceSettle:'/static/audio/dice-settle.mp3',winTiny:'/static/audio/win-tiny.mp3',winSmall:'/static/audio/win-small.mp3',winMedium:'/static/audio/win-medium.mp3',winBig:'/static/audio/win-big.mp3',winHuge:'/static/audio/win-huge.mp3',winMega:'/static/audio/win-mega.mp3',winJackpot:'/static/audio/jackpot.mp3',coinSingle:'/static/audio/coin-single.mp3',coinDrop:'/static/audio/coin-drop.mp3',coinShower:'/static/audio/coin-shower.mp3',coinCascade:'/static/audio/coin-cascade.mp3',cashRegister:'/static/audio/cash-register.mp3',fanfare1:'/static/audio/fanfare-1.mp3',fanfare2:'/static/audio/fanfare-2.mp3',fanfare3:'/static/audio/fanfare-3.mp3',applause:'/static/audio/applause.mp3',cheer:'/static/audio/cheer.mp3',airhorn:'/static/audio/airhorn.mp3',casinoAmbient1:'/static/audio/casino-ambient-1.mp3',casinoAmbient2:'/static/audio/casino-ambient-2.mp3',slotMachinesBg:'/static/audio/slot-machines-bg.mp3',crowdMurmur:'/static/audio/crowd-murmur.mp3',notificationSuccess:'/static/audio/notification-success.mp3',notificationError:'/static/audio/notification-error.mp3',notificationWarning:'/static/audio/notification-warning.mp3',notificationInfo:'/static/audio/notification-info.mp3',voiceWelcome:'/static/audio/voice-welcome.mp3',voiceCongratulations:'/static/audio/voice-congratulations.mp3',voiceJackpot:'/static/audio/voice-jackpot.mp3',voiceGoodLuck:'/static/audio/voice-good-luck.mp3',swooshIn:'/static/audio/swoosh-in.mp3',swooshOut:'/static/audio/swoosh-out.mp3',slideIn:'/static/audio/slide-in.mp3',slideOut:'/static/audio/slide-out.mp3',fadeTransition:'/static/audio/fade-transition.mp3'};this.fallbackSounds={buttonClick:'/static/audio/button-click.mp3',casinoWin:'/static/audio/casino-win.mp3',jackpot:'/static/audio/jackpot.mp3',reelSpin:'/static/audio/reel-spin.mp3',coinDrop:'/static/audio/coin-drop.mp3',slotPull:'/static/audio/slot-lever-pull.mp3'};this.audioPool=new Map();this.poolSize=5;this.impulseResponses={smallRoom:null,largeHall:null,cathedral:null,casino:null};this.initPromise=null;this.setupUserInteractionListener();this.loadPreferences();this.startPerformanceMonitoring();}
async initialize(){if(this.initialized)return;try{const AudioContext=window.AudioContext||window.webkitAudioContext;this.context=new AudioContext();this.setupAudioGraph();this.setupSpatialAudio();await this.preloadCriticalSounds();if(this.preferences.reverb&&this.convolver){this.createSyntheticReverb();}
this.initialized=true;console.log('ðŸŽµ Casino Audio Engine initialized successfully');if(this.context.state==='suspended'){await this.context.resume();}}catch(error){console.error('Failed to initialize audio engine:',error);this.fallbackToHTML5Audio();}}
setupAudioGraph(){this.masterGain=this.context.createGain();this.masterGain.gain.value=this.preferences.masterVolume;this.compressor=this.context.createDynamicsCompressor();this.compressor.threshold.value=-24;this.compressor.knee.value=30;this.compressor.ratio.value=12;this.compressor.attack.value=0.003;this.compressor.release.value=0.25;this.analyser=this.context.createAnalyser();this.analyser.fftSize=2048;this.analyser.smoothingTimeConstant=0.8;this.convolver=this.context.createConvolver();this.convolverGain=this.context.createGain();this.convolverGain.gain.value=0.3;this.dryGain=this.context.createGain();this.dryGain.gain.value=0.7;for(const[name,channel]of Object.entries(this.channels)){channel.gain=this.context.createGain();channel.gain.gain.value=channel.volume*this.preferences[`${name}Volume`]||channel.volume;}
this.compressor.connect(this.masterGain);this.masterGain.connect(this.analyser);this.analyser.connect(this.context.destination);if(this.preferences.reverb){this.convolver.connect(this.convolverGain);this.convolverGain.connect(this.masterGain);}}
setupSpatialAudio(){if(!this.context.listener){console.warn('Spatial audio not supported in this browser');return;}
this.listener=this.context.listener;if(this.listener.positionX){this.listener.positionX.value=0;this.listener.positionY.value=0;this.listener.positionZ.value=0;}else if(this.listener.setPosition){this.listener.setPosition(0,0,0);}
if(this.listener.forwardX){this.listener.forwardX.value=0;this.listener.forwardY.value=0;this.listener.forwardZ.value=-1;this.listener.upX.value=0;this.listener.upY.value=1;this.listener.upZ.value=0;}else if(this.listener.setOrientation){this.listener.setOrientation(0,0,-1,0,1,0);}}
async loadSound(url,useCache=true){if(useCache&&this.bufferCache.has(url)){return this.bufferCache.get(url);}
if(this.loadingPromises.has(url)){return this.loadingPromises.get(url);}
const fallbackUrl=this.getFallbackUrl(url);const actualUrl=await this.getValidAudioUrl(url,fallbackUrl);if(actualUrl!==url&&fallbackUrl){console.debug(`Using fallback audio:${actualUrl}instead of ${url}`);return this.loadSound(actualUrl,useCache);}
const loadPromise=this.fetchAndDecodeAudio(actualUrl||url);this.loadingPromises.set(url,loadPromise);try{const buffer=await loadPromise;this.bufferCache.set(url,buffer);this.loadingPromises.delete(url);return buffer;}catch(error){this.loadingPromises.delete(url);if(fallbackUrl&&fallbackUrl!==url&&actualUrl===url){console.warn(`Failed to load ${url},trying fallback ${fallbackUrl}`);return this.loadSound(fallbackUrl,useCache);}
throw error;}}
async fetchAndDecodeAudio(url){const startTime=performance.now();try{const response=await fetch(url);if(!response.ok){throw new Error(`HTTP error!status:${response.status}`);}
const arrayBuffer=await response.arrayBuffer();const audioBuffer=await this.context.decodeAudioData(arrayBuffer);this.performance.bufferLoadTime=performance.now()-startTime;return audioBuffer;}catch(error){if(error.message.includes('404')){console.debug(`Audio file not found:${url}`);}else if(error.message.includes('EncodingError')||error.message.includes('Unable to decode')){console.debug(`Audio decode error(using fallback):${url}`);}else if(!error.message.includes('416')){console.warn(`Audio load issue:${url}`,error.message);}
throw error;}}
getFallbackUrl(url){const filename=url.split('/').pop();return null;}
async getValidAudioUrl(primaryUrl,fallbackUrl){const existingFiles=this.getExistingFilesList();if(existingFiles.includes(primaryUrl)){return primaryUrl;}
if(fallbackUrl&&existingFiles.includes(fallbackUrl)){return fallbackUrl;}
try{const response=await fetch(primaryUrl,{method:'HEAD'});if(response.ok){return primaryUrl;}}catch(error){}
return fallbackUrl||primaryUrl;}
async play(soundName,options={}){if(!this.initialized){await this.initialize();}
if(this.preferences.muted)return;const defaults={volume:1.0,channel:'effects',loop:false,rate:1.0,detune:0,delay:0,fadeIn:0,fadeOut:0,pan:0,spatial:false,position:{x:0,y:0,z:0},reverb:false};const config={...defaults,...options};try{const url=this.soundLibrary[soundName]||this.fallbackSounds[soundName]||soundName;const buffer=await this.loadSound(url);if(config.delay>0){setTimeout(()=>this.playBuffer(buffer,config),config.delay);}else{await this.playBuffer(buffer,config);}}catch(error){if(!error.message.includes('404')&&!error.message.includes('decode')){console.debug(`Audio playback issue for ${soundName},using HTML5 fallback`);}
this.playHTML5Audio(soundName,config);}}
async playBuffer(buffer,config){const source=this.context.createBufferSource();source.buffer=buffer;source.loop=config.loop;source.playbackRate.value=config.rate;source.detune.value=config.detune;const gainNode=this.context.createGain();gainNode.gain.value=config.volume;if(config.fadeIn>0){gainNode.gain.setValueAtTime(0,this.context.currentTime);gainNode.gain.linearRampToValueAtTime(config.volume,this.context.currentTime+config.fadeIn);}
if(config.fadeOut>0&&buffer.duration>config.fadeOut){const fadeOutTime=this.context.currentTime+buffer.duration-config.fadeOut;gainNode.gain.setValueAtTime(config.volume,fadeOutTime);gainNode.gain.linearRampToValueAtTime(0,fadeOutTime+config.fadeOut);}
if(config.spatial&&this.preferences.spatialAudio){const panner=this.createPannerNode(config.position);source.connect(panner);panner.connect(gainNode);}else if(config.pan!==0){const panNode=this.context.createStereoPanner();panNode.pan.value=Math.max(-1,Math.min(1,config.pan));source.connect(panNode);panNode.connect(gainNode);}else{source.connect(gainNode);}
const channel=this.channels[config.channel]||this.channels.effects;gainNode.connect(channel.gain);if(config.reverb&&this.convolver&&this.preferences.reverb){gainNode.connect(this.convolver);}
channel.gain.connect(this.compressor);source.start(0);if(config.id){this.spatialSources.set(config.id,{source,gainNode});}
source.onended=()=>{if(config.id){this.spatialSources.delete(config.id);}};return source;}
createPannerNode(position){const panner=this.context.createPanner();panner.panningModel='HRTF';panner.distanceModel='inverse';panner.refDistance=1;panner.maxDistance=100;panner.rolloffFactor=1;panner.coneInnerAngle=360;panner.coneOuterAngle=0;panner.coneOuterGain=0;if(panner.positionX){panner.positionX.value=position.x;panner.positionY.value=position.y;panner.positionZ.value=position.z;}else if(panner.setPosition){panner.setPosition(position.x,position.y,position.z);}
return panner;}
async playSequence(sounds,interval=100){for(const sound of sounds){if(typeof sound==='string'){await this.play(sound);}else{await this.play(sound.name,sound.options);}
await this.sleep(interval);}}
async playRandom(sounds,options={}){const sound=sounds[Math.floor(Math.random()*sounds.length)];return this.play(sound,options);}
async playLayered(layers){const promises=layers.map(layer=>{if(typeof layer==='string'){return this.play(layer);}else{return this.play(layer.name,layer.options);}});return Promise.all(promises);}
async playDynamic(baseName,value,options={}){let soundName;if(baseName==='win'){if(value<5)soundName='winTiny';else if(value<10)soundName='winSmall';else if(value<25)soundName='winMedium';else if(value<50)soundName='winBig';else if(value<100)soundName='winHuge';else if(value<500)soundName='winMega';else soundName='winJackpot';}else if(baseName==='coin'){if(value===1)soundName='coinSingle';else if(value<10)soundName='coinDrop';else if(value<50)soundName='coinShower';else soundName='coinCascade';}else{soundName=baseName;}
const volume=Math.min(1.0,0.5+(value/200));return this.play(soundName,{...options,volume});}
stop(id){const spatial=this.spatialSources.get(id);if(spatial){spatial.source.stop();this.spatialSources.delete(id);}}
stopAll(){for(const[id,spatial]of this.spatialSources){spatial.source.stop();}
this.spatialSources.clear();}
async fadeVolume(from,to,duration=1000){const steps=30;const stepTime=duration/steps;const stepSize=(to-from)/steps;for(let i=0;i<=steps;i++){this.setMasterVolume(from+(stepSize*i));await this.sleep(stepTime);}}
setMasterVolume(value){this.preferences.masterVolume=Math.max(0,Math.min(1,value));if(this.masterGain){this.masterGain.gain.value=this.preferences.masterVolume;}
this.savePreferences();}
setChannelVolume(channel,value){const ch=this.channels[channel];if(ch){const volume=Math.max(0,Math.min(1,value));this.preferences[`${channel}Volume`]=volume;if(ch.gain){ch.gain.gain.value=ch.volume*volume;}
this.savePreferences();}}
toggleMute(){this.preferences.muted=!this.preferences.muted;if(this.masterGain){this.masterGain.gain.value=this.preferences.muted?0:this.preferences.masterVolume;}
this.savePreferences();return this.preferences.muted;}
setSpatialAudio(enabled){this.preferences.spatialAudio=enabled;this.savePreferences();}
async setReverb(enabled){this.preferences.reverb=enabled;if(enabled&&!this.convolver.buffer){this.createSyntheticReverb();}
if(this.convolverGain){this.convolverGain.gain.value=enabled?0.3:0;}
this.savePreferences();}
async loadImpulseResponse(type='casino'){if(!this.convolver)return;this.createSyntheticReverb();}
createSyntheticReverb(){const length=this.context.sampleRate*2;const impulse=this.context.createBuffer(2,length,this.context.sampleRate);for(let channel=0;channel<2;channel++){const channelData=impulse.getChannelData(channel);for(let i=0;i<length;i++){channelData[i]=(Math.random()*2-1)*Math.pow(1-i/length,2);}}
this.convolver.buffer=impulse;}
async preloadCriticalSounds(){const existingFiles=this.getExistingFilesList();const criticalSounds=['buttonClick','coinDrop','winSmall','winMedium','winBig','slotReelSpin','slotReelStop1'];const promises=criticalSounds.map(sound=>{const url=this.soundLibrary[sound]||this.fallbackSounds[sound];if(url&&existingFiles.includes(url)){return this.loadSound(url).catch(error=>{console.debug(`Preload skipped for ${sound}`);});}});await Promise.allSettled(promises);}
async preloadCategory(category){const categoryMap={ui:['buttonHover','buttonClick','modalOpen','modalClose'],slots:['slotLeverPull','slotReelStart','slotReelSpin','slotReelStop1','slotReelStop2','slotReelStop3'],wins:['winTiny','winSmall','winMedium','winBig','winHuge','winMega','winJackpot'],coins:['coinSingle','coinDrop','coinShower','coinCascade'],ambient:['casinoAmbient1','slotMachinesBg']};const sounds=categoryMap[category]||[];const promises=sounds.map(sound=>{const url=this.soundLibrary[sound];if(url){return this.loadSound(url).catch(error=>{console.warn(`Failed to preload ${sound}:`,error);});}});await Promise.allSettled(promises);}
createAudioPool(soundName,size=5){if(this.audioPool.has(soundName))return;const pool=[];const url=this.soundLibrary[soundName]||this.fallbackSounds[soundName];for(let i=0;i<size;i++){const audio=new Audio(url);audio.preload='auto';pool.push(audio);}
this.audioPool.set(soundName,{pool,index:0});}
playFromPool(soundName,volume=1.0){const poolData=this.audioPool.get(soundName);if(!poolData){this.createAudioPool(soundName);return this.play(soundName,{volume});}
const audio=poolData.pool[poolData.index];audio.volume=volume*this.preferences.effectsVolume;audio.currentTime=0;audio.play().catch(e=>console.warn('Pool playback failed:',e));poolData.index=(poolData.index+1)%poolData.pool.length;}
playHTML5Audio(soundName,config){const url=this.soundLibrary[soundName]||this.fallbackSounds[soundName]||soundName;const filename=url.split('/').pop();const existingFiles=this.getExistingFilesList();if(existingFiles.includes(url)){const audio=new Audio(url);audio.volume=config.volume*this.preferences.effectsVolume;audio.playbackRate=config.rate||1.0;audio.loop=config.loop||false;audio.play().catch(error=>{if(!error.message.includes('play() failed')&&!error.message.includes('user didn\'t interact')){console.debug('HTML5 audio issue:',error.message);}});return audio;}
return{play:()=>Promise.resolve(),pause:()=>{},volume:0};}
getExistingFilesList(){return['/static/audio/airhorn.mp3','/static/audio/applause.mp3','/static/audio/cash-register.mp3','/static/audio/casino-ambient-1.mp3','/static/audio/casino-ambient-2.mp3','/static/audio/casino-win.mp3','/static/audio/cheer.mp3','/static/audio/coin-cascade.mp3','/static/audio/coin-drop.mp3','/static/audio/coin-shower.mp3','/static/audio/coin-single.mp3','/static/audio/crowd-murmur.mp3','/static/audio/dice-land.mp3','/static/audio/dice-roll-1.mp3','/static/audio/dice-roll-2.mp3','/static/audio/dice-settle.mp3','/static/audio/dice-shake.mp3','/static/audio/dice-throw.mp3','/static/audio/fade-transition.mp3','/static/audio/fanfare-1.mp3','/static/audio/fanfare-2.mp3','/static/audio/fanfare-3.mp3','/static/audio/jackpot.mp3','/static/audio/modal-close.mp3','/static/audio/modal-open.mp3','/static/audio/notification-error.mp3','/static/audio/notification-info.mp3','/static/audio/notification-success.mp3','/static/audio/notification-warning.mp3','/static/audio/reel-spin.mp3','/static/audio/roulette-ball-bounce.mp3','/static/audio/roulette-ball-drop.mp3','/static/audio/roulette-ball-roll.mp3','/static/audio/roulette-click.mp3','/static/audio/roulette-spin.mp3','/static/audio/scratch-complete.mp3','/static/audio/scratch-loop.mp3','/static/audio/scratch-reveal.mp3','/static/audio/scratch-start.mp3','/static/audio/slide-in.mp3','/static/audio/slide-out.mp3','/static/audio/slot-lever-pull.mp3','/static/audio/slot-machines-bg.mp3','/static/audio/slot-near-miss.mp3','/static/audio/slot-reel-start.mp3','/static/audio/slot-reel-stop-1.mp3','/static/audio/slot-reel-stop-2.mp3','/static/audio/slot-reel-stop-3.mp3','/static/audio/swoosh-in.mp3','/static/audio/swoosh-out.mp3','/static/audio/tab-switch.mp3','/static/audio/ui-disabled.mp3','/static/audio/ui-hover.mp3','/static/audio/voice-congratulations.mp3','/static/audio/voice-good-luck.mp3','/static/audio/voice-jackpot.mp3','/static/audio/voice-welcome.mp3','/static/audio/wheel-slowdown.mp3','/static/audio/wheel-spin.mp3','/static/audio/wheel-start.mp3','/static/audio/wheel-stop.mp3','/static/audio/wheel-tick.mp3','/static/audio/win-big.mp3','/static/audio/win-huge.mp3','/static/audio/win-medium.mp3','/static/audio/win-mega.mp3','/static/audio/win-small.mp3','/static/audio/win-tiny.mp3'];}
fallbackToHTML5Audio(){console.warn('Falling back to HTML5 audio');this.initialized=true;this.play=async(soundName,options={})=>{if(this.preferences.muted)return;const config={volume:options.volume||1.0,loop:options.loop||false,rate:options.rate||1.0};return this.playHTML5Audio(soundName,config);};}
setupUserInteractionListener(){const initOnInteraction=async()=>{if(!this.initPromise){this.initPromise=this.initialize();document.removeEventListener('click',initOnInteraction);document.removeEventListener('touchstart',initOnInteraction);document.removeEventListener('keydown',initOnInteraction);}
return this.initPromise;};document.addEventListener('click',initOnInteraction,{once:false});document.addEventListener('touchstart',initOnInteraction,{once:false});document.addEventListener('keydown',initOnInteraction,{once:false});}
getVisualizationData(){if(!this.analyser)return null;const bufferLength=this.analyser.frequencyBinCount;const dataArray=new Uint8Array(bufferLength);this.analyser.getByteFrequencyData(dataArray);return dataArray;}
getAudioLevels(){if(!this.analyser)return{peak:0,rms:0};const bufferLength=this.analyser.frequencyBinCount;const dataArray=new Uint8Array(bufferLength);this.analyser.getByteTimeDomainData(dataArray);let peak=0;let sumSquares=0;for(let i=0;i<bufferLength;i++){const normalized=(dataArray[i]-128)/128;peak=Math.max(peak,Math.abs(normalized));sumSquares+=normalized*normalized;}
const rms=Math.sqrt(sumSquares/bufferLength);return{peak,rms};}
startPerformanceMonitoring(){setInterval(()=>{if(!this.context)return;this.performance.averageLatency=this.context.baseLatency||this.context.outputLatency||0;if(this.context.currentTime>0){const expectedTime=performance.now()/1000;const audioTime=this.context.currentTime;const drift=Math.abs(expectedTime-audioTime);if(drift>0.1){this.performance.droppedFrames++;}}},1000);}
savePreferences(){localStorage.setItem('casinoAudioPreferences',JSON.stringify(this.preferences));}
loadPreferences(){const saved=localStorage.getItem('casinoAudioPreferences');if(saved){try{this.preferences={...this.preferences,...JSON.parse(saved)};}catch(error){console.warn('Failed to load audio preferences:',error);}}}
sleep(ms){return new Promise(resolve=>setTimeout(resolve,ms));}
getStatus(){return{initialized:this.initialized,context:this.context?{state:this.context.state,sampleRate:this.context.sampleRate,latency:this.performance.averageLatency}:null,buffersCached:this.bufferCache.size,spatialSources:this.spatialSources.size,preferences:this.preferences,performance:this.performance};}}
window.casinoAudio=new CasinoAudioEngine();if(typeof module!=='undefined'&&module.exports){module.exports=CasinoAudioEngine;}